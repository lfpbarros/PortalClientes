# Generated by Django 5.2.3 on 2025-06-27 21:15

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_company_name', models.CharField(max_length=255, verbose_name='Full Company Name')),
                ('previous_names', models.TextField(blank=True, null=True, verbose_name='Previous Names')),
                ('aliases_trade_names', models.TextField(blank=True, null=True, verbose_name='Any other aliases or trade names')),
                ('registered_business_address', models.TextField(verbose_name='Registered Business Address')),
                ('tax_vat_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tax identification / VAT number')),
                ('trading_address', models.TextField(blank=True, null=True, verbose_name='Trading Address (if different from Registered Address)')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Email')),
                ('date_of_incorporation', models.DateField(blank=True, null=True, verbose_name='Date of Incorporation')),
                ('size_number_of_employees', models.CharField(blank=True, choices=[('1-10', '1-10 employees'), ('11-50', '11-50 employees'), ('51-200', '51-200 employees'), ('201-500', '201-500 employees'), ('501-1000', '501-1000 employees'), ('1001-5000', '1001-5000 employees'), ('5001+', '5001+ employees')], max_length=50, null=True, verbose_name='Size of the company/number of employees')),
                ('country_of_incorporation', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country of Incorporation')),
                ('company_registration_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Company registration number')),
                ('is_publicly_listed', models.BooleanField(default=False, verbose_name='Is the company publicly listed?')),
                ('stock_exchange_info', models.TextField(blank=True, null=True, verbose_name='Stock Exchange(s) name and listing identifier(s)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companies_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By User')),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'ordering': ['full_company_name'],
            },
        ),
        migrations.CreateModel(
            name='CertificationInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('company_name', models.CharField(max_length=255, verbose_name='Company')),
                ('position', models.CharField(max_length=255, verbose_name='Position')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='certification_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By User')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='certification_information', to='customers.company', verbose_name='Associated Company')),
            ],
            options={
                'verbose_name': 'Certification Information',
                'verbose_name_plural': 'Certification Information',
                'ordering': ['company__full_company_name'],
            },
        ),
        migrations.CreateModel(
            name='BusinessInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nature_of_proposed_contract', models.TextField(verbose_name='Please explain the nature of the business you intend to conduct with PRIO.')),
                ('has_agents_intermediaries', models.BooleanField(default=False, verbose_name='Will agents or intermediaries or subcontractors be involved in our business relationship?')),
                ('agents_intermediaries_details', models.TextField(blank=True, null=True, verbose_name='Please provide the details in the table below (including but not limited to: Name, Country of Residence and Role):')),
                ('has_prior_business_relationships', models.BooleanField(default=False, verbose_name='Has the company had any pre-existing business relationships with Repsol or its subsidiaries?')),
                ('repsol_company_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Repsol company name')),
                ('nature_of_agreement', models.TextField(blank=True, null=True, verbose_name='Nature of the agreement')),
                ('starting_date_relationship', models.DateField(blank=True, null=True, verbose_name='Starting date and whether the relationship is maintained today')),
                ('key_contacts', models.TextField(blank=True, null=True, verbose_name='Key contacts')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='business_info_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By User')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='business_information', to='customers.company', verbose_name='Associated Company')),
            ],
            options={
                'verbose_name': 'Business Information',
                'verbose_name_plural': 'Business Information',
                'ordering': ['company__full_company_name'],
            },
        ),
        migrations.CreateModel(
            name='BankingInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(max_length=255, verbose_name='Bank Name')),
                ('swift_code', models.CharField(blank=True, max_length=11, null=True, verbose_name='SWIFT')),
                ('account_number_iban', models.CharField(max_length=50, verbose_name='Account Number or IBAN')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='banking_info_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By User')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='banking_information', to='customers.company', verbose_name='Associated Company')),
            ],
            options={
                'verbose_name': 'Banking Information',
                'verbose_name_plural': 'Banking Information',
                'ordering': ['company__full_company_name'],
            },
        ),
        migrations.CreateModel(
            name='ComplianceAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualified', models.BooleanField(default=False, verbose_name="Qualified 'Yes' or 'No'")),
                ('risk_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('VERY_HIGH', 'Very High'), ('CRITICAL', 'Critical')], default='LOW', max_length=10, verbose_name='Risk Level')),
                ('risk_comment', models.TextField(blank=True, null=True, verbose_name='If the answer is Very High or Critical, please comment.')),
                ('qualified_in', models.DateField(blank=True, null=True, verbose_name='Qualified in (Date)')),
                ('next_qualification_in', models.DateField(blank=True, null=True, verbose_name='Next Qualification in (Date)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='compliance_analysis', to='customers.company', verbose_name='Associated Company')),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_analyses_performed', to=settings.AUTH_USER_MODEL, verbose_name='Analysis Performed By')),
            ],
            options={
                'verbose_name': 'Compliance Analysis',
                'verbose_name_plural': 'Compliance Analysis',
                'ordering': ['company__full_company_name'],
            },
        ),
        migrations.CreateModel(
            name='ComplianceInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy_code_of_ethics', models.BooleanField(default=False, verbose_name='Business code of ethics / code of conduct')),
                ('policy_crime_prevention', models.BooleanField(default=False, verbose_name='Crime prevention policies')),
                ('policy_anti_bribery_corruption', models.BooleanField(default=False, verbose_name='Anti-Bribery and corruption policies and procedures to prevent, detect and report bribery and corruption')),
                ('policy_due_diligence_processes', models.BooleanField(default=False, verbose_name='Due Diligence Processes of services providers, contractors, suppliers, and customers covering business integrity risks, e.g. Anti-Bribery and Corruption, International Sanctions and Embargoes, Anti-Money Laundering & Terrorism Financing')),
                ('due_diligence_process_description', models.TextField(blank=True, null=True, verbose_name='Describe the Due Diligence process')),
                ('policy_human_rights', models.BooleanField(default=False, verbose_name='Human rights and working conditions')),
                ('policy_donations_gifts', models.BooleanField(default=False, verbose_name='Donations, gifts and entertainment or political contributions')),
                ('policy_monitoring_payments', models.BooleanField(default=False, verbose_name='Monitoring system for all payments to enable to detect suspicious payments or transactions')),
                ('training_bribery_corruption', models.BooleanField(default=False, verbose_name='Bribery and corruption, money laundering, terrorist financing and sanctions violation')),
                ('training_business_ethics', models.BooleanField(default=False, verbose_name='Business ethics and conduct')),
                ('training_market_abuse', models.BooleanField(default=False, verbose_name='Market abuse and prohibited trading practices')),
                ('training_reporting_transactions', models.BooleanField(default=False, verbose_name='Identification and reporting of transactions to government authorities')),
                ('monitoring_reporting_policies_procedures', models.BooleanField(default=False, verbose_name='Does the company have risk based policies, procedures and monitoring processes for the identification and reporting of suspicious activities?')),
                ('compliance_requirements_description', models.TextField(blank=True, null=True, verbose_name='Describe how the company identifies and maintains compliance with regulatory requirements')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='compliance_information', to='customers.company', verbose_name='Associated Company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_records_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By User')),
            ],
            options={
                'verbose_name': 'Compliance Information',
                'verbose_name_plural': 'Compliance Information',
                'ordering': ['company__full_company_name'],
            },
        ),
        migrations.CreateModel(
            name='IndividualContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('position_job_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Position / Job Title')),
                ('business_address', models.TextField(blank=True, null=True, verbose_name='Business Address')),
                ('country_based', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country where based if different than business address')),
                ('direct_corporate_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Direct corporate phone')),
                ('direct_corporate_email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Direct corporate email')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='individual_contacts', to='customers.company', verbose_name='Associated Company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='individual_contacts_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By User')),
            ],
            options={
                'verbose_name': 'Individual Contact',
                'verbose_name_plural': 'Individual Contacts',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='InvestigationsSanctionsInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suspended_from_business', models.BooleanField(default=False, verbose_name='Has the company or any ultimate beneficial owner (including a parent company), shareholder, officer, director, employee or subsidiary been suspended from doing business in any capacity?')),
                ('suspended_from_business_details', models.TextField(blank=True, null=True, verbose_name='If yes, please specify the actions that have been taken to avoid similar enforcement issues in the future')),
                ('subject_of_investigations', models.BooleanField(default=False, verbose_name='Has the company or any ultimate beneficial owner (including a parent company), shareholder, officer, director, employee or subsidiary been subject of any former investigations, allegations, or conviction for offenses involving fraud, misrepresentation, corruption, bribery, tax evasion, terrorist financing, money laundering, accounting irregularities, fake human rights violation?')),
                ('subject_of_investigations_details', models.TextField(blank=True, null=True, verbose_name='If yes, please provide details as well as the corrective and mitigation measures implemented, if any')),
                ('company_operations_governmental_authority', models.BooleanField(default=False, verbose_name='Is the company or any ultimate beneficial owner (including a parent company), shareholder, officer, director, employee or subsidiary under investigation by a competent authority in any jurisdiction for criminal offenses involving fraud, misrepresentation, corruption, bribery, tax evasion, terrorist financing, money laundering, accounting irregularities, labor and/or human rights violation?')),
                ('company_operations_governmental_authority_details', models.TextField(blank=True, null=True, verbose_name='If the answer is yes, please specify the actions that have been taken to avoid similar enforcement issues in the future')),
                ('sanctioned_entity_individual', models.BooleanField(default=False, verbose_name="Is the company or any of its subsidiaries or any ultimate beneficial owner (UBO), director, officer, agent, employee or affiliate of the Company, currently included on the U.S. Treasury Department's List of Specially Designated Nationals (SDN), Sectoral Sanctions Identifications (SSI) List, or otherwise subject to any U.S. sanctions administered by the U.S. Treasury Department's Office of Foreign Assets Control ('OFAC'), the United Nations ('UN') Security Council Resolutions, the European Union ('EU') sanctions, or any similar sanctions programs enforced by other national or other international sanctioning agencies/measure, including sanctions imposed against certain states, organizations and individuals (collectively 'Sanctions')?")),
                ('sanctioned_entity_individual_details', models.TextField(blank=True, null=True, verbose_name='If the answer is yes, please specify the details in the table below')),
                ('has_sanctioned_entity_dealings_1', models.BooleanField(default=False, verbose_name="Does the Company or any of its UBOs, directors, officers, agents, employees or affiliates and its subsidiaries, have any locations, assets, direct or indirect investments, direct or indirect business or financial dealings in, or is organized under the laws of a Sanctioned Country or with any individual or entity subject to Sanctions (e.g. Cuba, Iran, North Korea, Russia and any other OFAC-Designated Territories or Citizens), such a 'Sanctioned Country' or with any individual or entity subject to Sanctions (each a 'Sanctioned Person')?")),
                ('sanctioned_entity_dealings_1_details', models.TextField(blank=True, null=True, verbose_name='If the answer is yes, please specify the details in the table below')),
                ('has_sanctioned_entity_dealings_2', models.BooleanField(default=False, verbose_name='Does the Company or any of its subsidiaries engaged in the direct or indirect financing or facilitating of a loan to, investment in or other transaction involving a Sanctioned Country and/or a Sanctioned Person in the past?')),
                ('sanctioned_entity_dealings_2_details', models.TextField(blank=True, null=True, verbose_name='If yes, please describe such activities')),
                ('has_sanctioned_entity_dealings_3', models.BooleanField(default=False, verbose_name='Does the Company or any of its directors, officers, agents, employees or affiliates have any business, operations or other direct or indirect dealings involving commodities or services of a Sanctioned Country origin or shipped to, through, or from a Sanctioned Country, or an Sanctioned Country owned or registered vessels or aircraft, or finance or sale or export of the Company’s or any of its subsidiaries products for or with the involvement of any Sanctioned Country company or individual?')),
                ('sanctioned_entity_dealings_3_details', models.TextField(blank=True, null=True, verbose_name='If the answer is yes, please specify the details in the table below')),
                ('has_sanctioned_entity_dealings_4', models.BooleanField(default=False, verbose_name='Does the company have any place policies and procedures to ensure compliance with Sanctions? / to prevent Sanctions violations (including but not limited to, third party screening, sanctions clauses in contracts, employee and third-party training, due diligence processes for transactions, and employee reporting or whistleblowing function, pre-embargoes and export control regulations?')),
                ('sanctioned_entity_dealings_4_details', models.TextField(blank=True, null=True, verbose_name='If the answer is yes, please specify the details in the table below')),
                ('has_sanctioned_entity_dealings_5', models.BooleanField(default=False, verbose_name='Has the Company or any of its shareholders, members of the board, employees, etc. been subject to an investigation regarding Sanctions?')),
                ('sanctioned_entity_dealings_5_details', models.TextField(blank=True, null=True, verbose_name='If the answer is yes, please specify the details in the table below')),
                ('main_source_revenue_located', models.TextField(blank=True, null=True, verbose_name="Where is the company's main source of revenue located?")),
                ('main_source_revenue_details', models.TextField(blank=True, null=True, verbose_name='Please specify the details in the table below')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='investigations_sanctions', to='customers.company', verbose_name='Associated Company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='investigations_sanctions_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By User')),
            ],
            options={
                'verbose_name': 'Investigations & Sanctions Information',
                'verbose_name_plural': 'Investigations & Sanctions Information',
                'ordering': ['company__full_company_name'],
            },
        ),
        migrations.CreateModel(
            name='KYCDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('COMMERCIAL_REGISTRATION', 'Commercial Registration'), ('CERTIFICATE_INCORPORATION', 'Certificate of Incorporation'), ('FINANCIAL_STATEMENTS', 'Financial Statements'), ('BANK_CERTIFICATE', 'Bank Certificate'), ('OWNERSHIP_STRUCTURE', 'Ownership Structure / Corporate Structure'), ('COMPLIANCE_POLICIES', 'Compliance Policies and Procedures'), ('OTHER', 'Other (Specify below)')], max_length=50, verbose_name='Document Type')),
                ('file', models.FileField(upload_to='kyc_documents/', verbose_name='File')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description / Notes')),
                ('is_recommended', models.BooleanField(default=False, verbose_name='Recommended Document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kyc_documents', to='customers.company', verbose_name='Associated Company')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kyc_docs_uploaded', to=settings.AUTH_USER_MODEL, verbose_name='Uploaded By User')),
            ],
            options={
                'verbose_name': 'KYC Document',
                'verbose_name_plural': 'KYC Documents',
                'ordering': ['company__full_company_name', 'document_type'],
            },
        ),
        migrations.CreateModel(
            name='OwnershipManagementInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ownership_management', to='customers.company', verbose_name='Associated Company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ownership_mgmt_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By User')),
            ],
            options={
                'verbose_name': 'Ownership & Management Information',
                'verbose_name_plural': 'Ownership & Management Information',
                'ordering': ['company__full_company_name'],
            },
        ),
        migrations.CreateModel(
            name='ManagementAndKeyEmployees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('job_title', models.CharField(max_length=255, verbose_name='Job Title')),
                ('nationality', models.CharField(max_length=100, verbose_name='Nationality')),
                ('passport_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Passport Number')),
                ('country_of_residence', models.CharField(max_length=100, verbose_name='Country of Residence')),
                ('government_official', models.BooleanField(default=False, verbose_name='Government Official?')),
                ('ownership_management', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='management_and_key_employees', to='customers.ownershipmanagementinfo', verbose_name='Ownership & Management Info')),
            ],
            options={
                'verbose_name': 'Management and Key Employee',
                'verbose_name_plural': 'Management and Key Employees',
            },
        ),
        migrations.CreateModel(
            name='MajorShareholder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_individual', models.CharField(max_length=255, verbose_name='Company/Individual')),
                ('name_of_individual_company', models.CharField(max_length=255, verbose_name='Name of Individual / Company')),
                ('nationality_registered_country', models.CharField(max_length=100, verbose_name='Nationality or Registered Country')),
                ('address_registered_business_address', models.TextField(verbose_name='Address / Registered Business Address')),
                ('type_of_relationship', models.CharField(max_length=255, verbose_name='Type of Relationship')),
                ('government_official_state_owned_entity', models.CharField(blank=True, max_length=255, null=True, verbose_name='Government Official / State Owned Entity')),
                ('percentage_of_ownership', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentage of Ownership')),
                ('ownership_management', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='major_shareholders', to='customers.ownershipmanagementinfo', verbose_name='Ownership & Management Info')),
            ],
            options={
                'verbose_name': 'Major Shareholder',
                'verbose_name_plural': 'Major Shareholders',
            },
        ),
        migrations.CreateModel(
            name='GovernmentOfficialInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('needs_to_interact', models.BooleanField(default=False, verbose_name='Does your Company need to interact with Government Officials in order to perform the proposed contract?')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Details (including but not limited to: Name, Country of Residence and Role)')),
                ('has_commercial_advantage', models.BooleanField(default=False, verbose_name='Has the Company, in order to obtain or retain business or any other form of commercial advantage, provided any payments or other compensation, directly or through intermediaries, to a Government Official?')),
                ('commercial_advantage_details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('ownership_management', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='government_official_interactions', to='customers.ownershipmanagementinfo', verbose_name='Ownership & Management Info')),
            ],
            options={
                'verbose_name': 'Government Official Interaction',
                'verbose_name_plural': 'Government Official Interactions',
            },
        ),
        migrations.CreateModel(
            name='BoardOfDirectors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('board_position', models.CharField(max_length=255, verbose_name='Board Position')),
                ('nationality', models.CharField(max_length=100, verbose_name='Nationality')),
                ('passport_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Passport Number')),
                ('country_of_residence', models.CharField(max_length=100, verbose_name='Country of Residence')),
                ('government_official', models.BooleanField(default=False, verbose_name='Government Official?')),
                ('ownership_management', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_of_directors', to='customers.ownershipmanagementinfo', verbose_name='Ownership & Management Info')),
            ],
            options={
                'verbose_name': 'Board of Director',
                'verbose_name_plural': 'Board of Directors',
            },
        ),
        migrations.CreateModel(
            name='StatusControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trading_qualified', models.BooleanField(default=False, verbose_name='Trading Qualified?')),
                ('compliance_qualified', models.BooleanField(default=False, verbose_name='Compliance Qualified?')),
                ('treasury_qualified', models.BooleanField(default=False, verbose_name='Treasury Qualified?')),
                ('client_request_information', models.BooleanField(default=False, verbose_name='Client Request Information?')),
                ('client_request_information_details', models.TextField(blank=True, null=True, verbose_name="If the answer is yes, when did client requested PRIO's information, detail indicating if via e-mail, to compile form or link")),
                ('prio_responded', models.BooleanField(default=False, verbose_name='PRIO Responded?')),
                ('prio_responded_details', models.TextField(blank=True, null=True, verbose_name='If the answer is yes, when did PRIO respond, detail indicating if via e-mail, compiled form or link')),
                ('is_pending', models.BooleanField(default=False, verbose_name='Is anything pending?')),
                ('pending_details', models.TextField(blank=True, null=True, verbose_name='If the answer is yes, what information/action is pending')),
                ('client_onboarding_finished', models.BooleanField(default=False, verbose_name='Did Client Respond with OK / Finishing its Onboarding/KYC?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='status_control', to='customers.company', verbose_name='Associated Company')),
                ('last_updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_control_updates', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By')),
            ],
            options={
                'verbose_name': 'Status Control',
                'verbose_name_plural': 'Status Control',
                'ordering': ['company__full_company_name'],
            },
        ),
        migrations.CreateModel(
            name='UltimateBeneficialOwner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_individual', models.CharField(max_length=255, verbose_name='Company/Individual')),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('nationality_registered_country', models.CharField(max_length=100, verbose_name='Nationality / Registered Country')),
                ('country_of_residence', models.CharField(max_length=100, verbose_name='Country of Residence')),
                ('government_official_state_owned_entity', models.CharField(blank=True, max_length=255, null=True, verbose_name='Government Official / State Owned Entity')),
                ('percentage_of_ownership', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentage of Ownership')),
                ('ownership_management', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ultimate_beneficial_owners', to='customers.ownershipmanagementinfo', verbose_name='Ownership & Management Info')),
            ],
            options={
                'verbose_name': 'Ultimate Beneficial Owner',
                'verbose_name_plural': 'Ultimate Beneficial Owners',
            },
        ),
    ]
